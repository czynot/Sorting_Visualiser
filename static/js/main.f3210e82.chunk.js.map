{"version":3,"sources":["logo.svg","SortingAlgorithms/SortingAlgorithms.js","SortingVisualiser/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeAnimations","array","animations","length","helperArray","slice","mergeHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","min","max","random","this","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","value","idx","key","onClick","resetArray","mergeSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3210e82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function getMergeAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const helperArray = array.slice();\n    mergeHelper(array, 0, array.length - 1, helperArray, animations);\n    return animations;\n  }\n\nfunction mergeHelper(\n    mainArray,\n    startIndex,\n    endIndex,\n    helperArray,\n    animations,\n  ) {\n    if (startIndex === endIndex) return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeHelper(helperArray, startIndex, middleIndex, mainArray, animations);\n    mergeHelper(helperArray, middleIndex + 1, endIndex, mainArray, animations);\n    doMerge(mainArray, startIndex, middleIndex, endIndex, helperArray, animations);\n  }\n\nfunction doMerge (\n    mainArray,\n    startIndex,\n    middleIndex,\n    endIndex,\n    helperArray,\n    animations,\n) {\n  let k = startIndex;\n  let i = startIndex;\n  let j = middleIndex + 1;\n    while (i <= middleIndex && j <= endIndex) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n        if (helperArray[i] <= helperArray[j]) {\n          animations.push([k, helperArray[i]]);\n          mainArray[k++] = helperArray[i++];\n        } else {\n          animations.push([k, helperArray[j]]);\n          mainArray[k++] = helperArray[j++];\n        }\n      }\n    while (i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([k, helperArray[i]]);\n        mainArray[k++] = helperArray[i++];\n      }\n    while (j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([k, helperArray[j]]);\n        mainArray[k++] = helperArray[j++];\n      }\n}","import React from 'react'\nimport './SortingVisualizer.css' \nimport {getMergeAnimations} from '../SortingAlgorithms/SortingAlgorithms.js';\nimport { render } from '@testing-library/react';\n\nconst ANIMATION_SPEED_MS = 5;\n\n\n// Number of array bars to be displayed\nconst NUMBER_OF_ARRAY_BARS = 400;\n\n// Primary\nconst PRIMARY_COLOR = 'royalblue';\n\nconst SECONDARY_COLOR = 'darkred';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n          array.push(randomIntFromInterval(5, 750));\n        }\n        this.setState({array});\n      }\n    \n    mergeSort() {\n        const animations = getMergeAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n    \n        return (\n          <div className=\"array-container\">\n            {array.map((value, idx) => (\n              <div\n                className=\"array-bar\"\n                key={idx}\n                style={{\n                  backgroundColor: PRIMARY_COLOR,\n                  height: `${value}px`,\n                }}></div>\n            ))}\n            <button onClick={() => this.resetArray()}>Generate New Array</button>\n            <button onClick={() => this.mergeSort()}>Merge Sort</button>\n          </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    // Copied from Stack Overflow so I don't know how this works lmao\n    // Please refer to https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualiser/SortingVisualizer';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}